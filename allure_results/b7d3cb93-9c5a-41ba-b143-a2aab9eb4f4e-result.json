{"name": "Создание избранного места с нулевой широтой и долготой", "status": "broken", "statusDetails": {"message": "requests.exceptions.JSONDecodeError: Extra data: line 1 column 5 (char 4)", "trace": "self = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n>           return complexjson.loads(self.text, **kwargs)\n\n.venv/lib/python3.12/site-packages/requests/models.py:974: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads\n    return _default_decoder.decode(s)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <json.decoder.JSONDecoder object at 0x100f8a600>, s = '500 Internal Server Error\\n\\nServer got itself in trouble'\n_w = <built-in method match of re.Pattern object at 0x100fac040>\n\n    def decode(self, s, _w=WHITESPACE.match):\n        \"\"\"Return the Python representation of ``s`` (a ``str`` instance\n        containing a JSON document).\n    \n        \"\"\"\n        obj, end = self.raw_decode(s, idx=_w(s, 0).end())\n        end = _w(s, end).end()\n        if end != len(s):\n>           raise JSONDecodeError(\"Extra data\", s, end)\nE           json.decoder.JSONDecodeError: Extra data: line 1 column 5 (char 4)\n\n/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:340: JSONDecodeError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_create_favourite_place_lat.TestCreateFavouritePlaceLat object at 0x1020d6600>\n\n    @allure.title('Создание избранного места с нулевой широтой и долготой')\n    @allure.issue('BUG: Тест не проходит, возникает ошибка - файл не соответствует формату JSON.')\n    def test_create_favourite_place_with_zero_lat_lon(self):\n        helper = Helpers()\n        token = helper.get_token()\n        place = Place.place_with_zero_lat_lon\n        response = requests.post(Urls.url_create_place, headers={'Cookie': token}, data=place)\n>       lat = response.json()['lat']\n\ntests/test_create_favourite_place_lat.py:75: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <Response [500]>, kwargs = {}\n\n    def json(self, **kwargs):\n        r\"\"\"Returns the json-encoded content of a response, if any.\n    \n        :param \\*\\*kwargs: Optional arguments that ``json.loads`` takes.\n        :raises requests.exceptions.JSONDecodeError: If the response body does not\n            contain valid json.\n        \"\"\"\n    \n        if not self.encoding and self.content and len(self.content) > 3:\n            # No encoding set. JSON RFC 4627 section 3 states we should expect\n            # UTF-8, -16 or -32. Detect which one to use; If the detection or\n            # decoding fails, fall back to `self.text` (using charset_normalizer to make\n            # a best guess).\n            encoding = guess_json_utf(self.content)\n            if encoding is not None:\n                try:\n                    return complexjson.loads(self.content.decode(encoding), **kwargs)\n                except UnicodeDecodeError:\n                    # Wrong UTF codec detected; usually because it's not UTF-8\n                    # but some other 8-bit codec.  This is an RFC violation,\n                    # and the server didn't bother to tell us what codec *was*\n                    # used.\n                    pass\n                except JSONDecodeError as e:\n                    raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\n    \n        try:\n            return complexjson.loads(self.text, **kwargs)\n        except JSONDecodeError as e:\n            # Catch JSON-related errors and raise as requests.JSONDecodeError\n            # This aliases json.JSONDecodeError and simplejson.JSONDecodeError\n>           raise RequestsJSONDecodeError(e.msg, e.doc, e.pos)\nE           requests.exceptions.JSONDecodeError: Extra data: line 1 column 5 (char 4)\n\n.venv/lib/python3.12/site-packages/requests/models.py:978: JSONDecodeError"}, "steps": [{"name": "Получение сессионного токена", "status": "passed", "start": 1721810259489, "stop": 1721810259524}], "start": 1721810259488, "stop": 1721810259562, "uuid": "61ac8b33-ae34-4ced-91c2-943a60da318f", "historyId": "e77a80f88623417af2db40bab619ccbb", "testCaseId": "e77a80f88623417af2db40bab619ccbb", "fullName": "tests.test_create_favourite_place_lat.TestCreateFavouritePlaceLat#test_create_favourite_place_with_zero_lat_lon", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_create_favourite_place_lat"}, {"name": "subSuite", "value": "TestCreateFavouritePlaceLat"}, {"name": "host", "value": "MBP-Ilya.cn.ru_novotelecom.ru"}, {"name": "thread", "value": "20891-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_create_favourite_place_lat"}], "links": [{"type": "issue", "url": "BUG: Тест не проходит, возникает ошибка - файл не соответствует формату JSON.", "name": "BUG: Тест не проходит, возникает ошибка - файл не соответствует формату JSON."}]}